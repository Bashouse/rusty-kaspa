use crate::{block::Block, header::Header, subnets::SUBNETWORK_ID_COINBASE, tx::Transaction};
use bascoin_hashes::{Hash, ZERO_HASH};
use bascoin_muhash::EMPTY_MUHASH;

/// The constants uniquely representing the genesis block
#[derive(Clone, Debug)]
pub struct GenesisBlock {
    pub hash: Hash,
    pub version: u16,
    pub hash_merkle_root: Hash,
    pub utxo_commitment: Hash,
    pub timestamp: u64,
    pub bits: u32,
    pub nonce: u64,
    pub daa_score: u64,
    pub coinbase_payload: &'static [u8],
}

impl GenesisBlock {
    pub fn build_genesis_transactions(&self) -> Vec<Transaction> {
        vec![Transaction::new(0, Vec::new(), Vec::new(), 0, SUBNETWORK_ID_COINBASE, 0, self.coinbase_payload.to_vec())]
    }
}

impl From<&GenesisBlock> for Header {
    fn from(genesis: &GenesisBlock) -> Self {
        Header::new_finalized(
            genesis.version,
            Vec::new(),
            genesis.hash_merkle_root,
            ZERO_HASH,
            genesis.utxo_commitment,
            genesis.timestamp,
            genesis.bits,
            genesis.nonce,
            genesis.daa_score,
            0.into(),
            0,
            ZERO_HASH,
        )
    }
}

impl From<&GenesisBlock> for Block {
    fn from(genesis: &GenesisBlock) -> Self {
        Block::new(genesis.into(), genesis.build_genesis_transactions())
    }
}

impl From<(&Header, &'static [u8])> for GenesisBlock {
    fn from((header, payload): (&Header, &'static [u8])) -> Self {
        Self {
            hash: header.hash,
            version: header.version,
            hash_merkle_root: header.hash_merkle_root,
            utxo_commitment: header.utxo_commitment,
            timestamp: header.timestamp,
            bits: header.bits,
            nonce: header.nonce,
            daa_score: header.daa_score,
            coinbase_payload: payload,
        }
    }
}

/// The genesis block of the block-DAG which serves as the public transaction ledger for the main network.
pub const GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0x58, 0xc2, 0xd4, 0x19, 0x9e, 0x21, 0xf9, 0x10, 0xd1, 0x57, 0x1d, 0x11, 0x49, 0x69, 0xce, 0xce, 0xf4, 0x8f, 0x9, 0xf9, 0x34,
        0xd4, 0x2c, 0xcb, 0x6a, 0x28, 0x1a, 0x15, 0x86, 0x8f, 0x29, 0x99,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0x8e, 0xc8, 0x98, 0x56, 0x8c, 0x68, 0x1, 0xd1, 0x3d, 0xf4, 0xee, 0x6e, 0x2a, 0x1b, 0x54, 0xb7, 0xe6, 0x23, 0x6f, 0x67, 0x1f,
        0x20, 0x95, 0x4f, 0x5, 0x30, 0x64, 0x10, 0x51, 0x8e, 0xeb, 0x32,
    ]),
    utxo_commitment: Hash::from_bytes([
        0x71, 0x0f, 0x27, 0xdf, 0x42, 0x3e, 0x63, 0xaa, 0x6c, 0xdb, 0x72, 0xb8, 0x9e, 0xa5, 0xa0, 0x6c, 0xff, 0xa3, 0x99, 0xd6, 0x6f,
        0x16, 0x77, 0x04, 0x45, 0x5b, 0x5a, 0xf5, 0x9d, 0xef, 0x8e, 0x20,
    ]),
    timestamp: 1718049600000, // Placeholder: Update this to a new UTC timestamp in milliseconds
    bits: 486722099,
    nonce: 0x3392c,
    daa_score: 1312860, // Checkpoint DAA score
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, //script version
        0x01,                                           // Varint
        0x00,                                           // OP-FALSE
        0x62, 0x61, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x2d, // bascoin-
        0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74,       // mainnet
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Bitcoin block hash 0000000000000000000b1f8e1c17b0133d439174e52efbb0c41c3583a8aa66b0
        0x00, 0x0b, 0x1f, 0x8e, 0x1c, 0x17, 0xb0, 0x13,
        0x3d, 0x43, 0x91, 0x74, 0xe5, 0x2e, 0xfb, 0xb0,
        0xc4, 0x1c, 0x35, 0x83, 0xa8, 0xaa, 0x66, 0xb0,
        0x0f, 0xca, 0x37, 0xca, 0x66, 0x7c, 0x2d, 0x55, // Checkpoint block hash 0fca37ca667c2d550a6c4416dad9717e50927128c424fa4edbebc436ab13aeef
        0x0a, 0x6c, 0x44, 0x16, 0xda, 0xd9, 0x71, 0x7e,
        0x50, 0x92, 0x71, 0x28, 0xc4, 0x24, 0xfa, 0x4e,
        0xdb, 0xeb, 0xc4, 0x36, 0xab, 0x13, 0xae, 0xef,
    ],
};

pub const TESTNET_GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0xfb, 0x9e, 0x66, 0x63, 0x06, 0xc8, 0xed, 0x77, 0x8d, 0xc2, 0x23, 0x5a, 0xe4, 0xc4, 0x15, 0x84, 0x63, 0x7e, 0x19, 0x9b, 0x9d,
        0x20, 0x9e, 0x8d, 0xf6, 0x42, 0x39, 0x5a, 0x4a, 0x50, 0x9b, 0x31,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0x79, 0x16, 0x6a, 0xd9, 0x7d, 0xc1, 0x68, 0xed, 0x96, 0x2c, 0xd4, 0x7a, 0x85, 0x6c, 0x24, 0x50, 0x7a, 0x3b, 0x30, 0x73, 0x9b,
        0x45, 0x67, 0xfd, 0x42, 0x58, 0x69, 0x87, 0x73, 0x4a, 0xaa, 0x01,
    ]),
    utxo_commitment: EMPTY_MUHASH,
    timestamp: 1642879500000,
    bits: 0x1e07b80a,
    nonce: 0x38827,
    daa_score: 0,
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01,                                                                   // Varint
        0x00,                                                                   // OP-FALSE
        0x62, 0x61, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x2d, // bascoin-
        0x74, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74,       // testnet
    ],
};

pub const TESTNET11_GENESIS: GenesisBlock = GenesisBlock {
    timestamp: 1675704176461,
    nonce: 0x0c997,
    daa_score: 30000000,
    hash: Hash::from_bytes([
        0x8a, 0x41, 0x2a, 0x95, 0x97, 0x8c, 0x4c, 0xc1, 0x6b, 0x3b, 0xca, 0x15, 0x2d, 0x2f, 0xce, 0x39, 0x51, 0x76, 0x17, 0x38, 0xd0,
        0x44, 0xd4, 0x10, 0xf6, 0x30, 0x67, 0x7c, 0x1f, 0x2d, 0x06, 0x63,
    ]),
    hash_merkle_root: Hash::from_bytes([
        0x2c, 0x9f, 0x69, 0xcb, 0xaa, 0x80, 0x6f, 0x86, 0x82, 0x42, 0x34, 0x74, 0x04, 0x8a, 0x6e, 0x0d, 0x21, 0x14, 0x4d, 0x3d, 0x76,
        0x19, 0x74, 0x95, 0x4b, 0x5a, 0x0e, 0x71, 0x7e, 0x3c, 0xb8, 0xb9,
    ]),
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01,                                           // Varint
        0x00,                                           // OP-FALSE
        0x62, 0x61, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x2d, // bascoin-
        0x74, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x31, // testnet11
        0x31,                                           // TN11
    ],
    ..TESTNET_GENESIS
};

pub const SIMNET_GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0x41, 0x1f, 0x8c, 0xd2, 0x6f, 0x3d, 0x41, 0xae, 0xa3, 0x9e, 0x78, 0x57, 0x39, 0x27, 0xda, 0x24, 0xd2, 0x39, 0x95, 0x70, 0x5b,
        0x57, 0x9f, 0x30, 0x95, 0x9b, 0x91, 0x27, 0xe9, 0x6b, 0x79, 0xe3,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0x19, 0x46, 0xd6, 0x29, 0xf7, 0xe9, 0x22, 0xa7, 0xbc, 0xed, 0x59, 0x19, 0x05, 0x21, 0xc3, 0x77, 0x1f, 0x73, 0xd3, 0x52, 0xdd,
        0xbb, 0xb6, 0x86, 0x56, 0x4a, 0xd7, 0xfd, 0x56, 0x85, 0x7c, 0x1b,
    ]),
    utxo_commitment: EMPTY_MUHASH,
    timestamp: 0x17c5f62fbb6,
    bits: 0x207fffff,
    nonce: 0x2,
    daa_score: 0,
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01,                                                                   // Varint
        0x00,                                                                   // OP-FALSE
        0x62, 0x61, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x73, 0x69, 0x6d, 0x6e, // bascoin-simn
        0x65, 0x74,                                                           // et
    ],
};

pub const DEVNET_GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        // Golang devnet genesis hash
        // 0xb3, 0x13, 0x87, 0x0a, 0x32, 0xc7, 0x04, 0xbd, 0xf1, 0x21, 0x4a, 0x3b, 0x27, 0x0c, 0xc4, 0x75, 0xd9, 0x42, 0xc2, 0x09, 0x2d,
        // 0x37, 0x9b, 0xc8, 0x70, 0x0a, 0xb0, 0x43, 0x31, 0x9e, 0xf8,
        // 0x46,
        // New rust devnet genesis hash updated according to the modified bits field (see below)
        0x4c, 0xb4, 0x8d, 0x0b, 0x20, 0x73, 0xb8, 0x02, 0x36, 0x01, 0x45, 0xa1, 0x5a, 0xd1, 0xab, 0xdc, 0x01, 0xd8, 0x9b, 0x5c, 0x2f,
        0xe4, 0x72, 0x26, 0x30, 0xab, 0x9b, 0x5f, 0xe9, 0xdf, 0xc4, 0xf2,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0x58, 0xab, 0xf2, 0x03, 0x21, 0xd7, 0x07, 0x16, 0x16, 0x2b, 0x6b, 0xf8, 0xd9, 0xf5, 0x89, 0xca, 0x33, 0xae, 0x6e, 0x32, 0xb3,
        0xb1, 0x9a, 0xbb, 0x7f, 0xa6, 0x5d, 0x11, 0x41, 0xa3, 0xf9, 0x4d,
    ]),
    utxo_commitment: EMPTY_MUHASH,
    timestamp: 0x11e9db49828,
    // bits: 525264379, // Golang devnet genesis bits
    bits: 0x1e21bc1c, // Bits with ~testnet-like difficulty for slow devnet start
    nonce: 0x48e5e,
    daa_score: 0,
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01,                                                                   // Varint
        0x00,                                                                   // OP-FALSE
        0x62, 0x61, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x64, 0x65, 0x76, 0x6e, 0x65, 0x74, // bascoin-devnet
    ],
};

pub const KRIPPY_GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]),
    utxo_commitment: EMPTY_MUHASH,
    timestamp: 0,
    bits: 0x207fffff, // Very low difficulty for easy mining
    nonce: 0,
    daa_score: 0,
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01,                                           // Varint
        0x00,                                           // OP-FALSE
        0x62, 0x61, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x2d, // bascoin-
        0x6b, 0x72, 0x69, 0x70, 0x70, 0x79,             // krippy
    ],
};

pub const NIPPY_GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]),
    utxo_commitment: EMPTY_MUHASH,
    timestamp: 0,
    bits: 0x207fffff, // Very low difficulty for easy mining
    nonce: 0,
    daa_score: 0,
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01,                                           // Varint
        0x00,                                           // OP-FALSE
        0x62, 0x61, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x2d, // bascoin-
        0x6e, 0x69, 0x70, 0x70, 0x79,                   // nippy
    ],
};

pub const BIERO_GENESIS: GenesisBlock = GenesisBlock {
    hash: Hash::from_bytes([
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]),
    version: 0,
    hash_merkle_root: Hash::from_bytes([
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]),
    utxo_commitment: EMPTY_MUHASH,
    timestamp: 0,
    bits: 0x207fffff, // Very low difficulty for easy mining
    nonce: 0,
    daa_score: 0,
    #[rustfmt::skip]
    coinbase_payload: &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
        0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
        0x00, 0x00, // Script version
        0x01,                                           // Varint
        0x00,                                           // OP-FALSE
        0x62, 0x61, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x2d, // bascoin-
        0x62, 0x69, 0x65, 0x72, 0x6f,                   // biero
    ],
};

#[cfg(test)]
mod tests {
    use super::*;
    use bascoin_hashes::Hash; // Ensure this is bascoin_hashes for the test
    use std::str::FromStr;

    #[test]
    fn test_genesis_constants() {
        // Ensure the genesis hash is correctly defined based on the other constants
        let expected_genesis_hash = Hash::from_str("58c2d4199e21f910d1571d114969cecef48f09f934d42ccb6a281a15868f2999").unwrap();
        assert_eq!(GENESIS.hash, expected_genesis_hash);
        assert_eq!(Block::from(&GENESIS).header.hash, expected_genesis_hash);

        // For Testnet, Simnet, Devnet, similar checks could be added once their hashes are regenerated.
        // For now, ensure the payload change has been applied correctly.
        // let simnet_payload_str = String::from_utf8(SIMNET_GENESIS.coinbase_payload.to_vec()).unwrap();
        assert_eq!(SIMNET_GENESIS.coinbase_payload,
            &[
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
                0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
                0x00, 0x00, // Script version
                0x01, // Varint
                0x00, // OP-FALSE
                0x62, 0x61, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x73, 0x69, 0x6d, 0x6e, // bascoin-simn
                0x65, 0x74, // et
            ]
        );

        // let devnet_payload_str = String::from_utf8(DEVNET_GENESIS.coinbase_payload.to_vec()).unwrap();
        assert_eq!(DEVNET_GENESIS.coinbase_payload,
            &[
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Blue score
                0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00, // Subsidy
                0x00, 0x00, // Script version
                0x01, // Varint
                0x00, // OP-FALSE
                0x62, 0x61, 0x73, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x64, 0x65, 0x76, 0x6e, 0x65, 0x74, // bascoin-devnet
            ]
        );
    }
}
